1.本周学习进展
    1.1 通过构造的方法初始化题目（轮盘赌+锦标赛） 修补算子（correct 长度、题型、属性）
        1.1.1  防止题型顺序，导致轮盘赌概率失效问题
               解决方案：①hashCode取模，对题库的字段结构做一定的更改（type p1 p2 p3 p4 p5）
               // 是否会因为数据库属性排列的规则，导致随机选取的题目不具有代表性  50~150均为填空题,这样的话，题目就算概率受到惩罚系数的影响，因为基数大导致影响波动变小
               // 解决方案:题目顺序打乱（修改数据库的属性排序、查询返回的结果进行随机化、bankList使用hashSet接收）


    //拿itemSet衡量arrayList,并选取最优
     * FIXME 使用构造法选取题目
     *          1.题型、属性构造解决 （考虑上限比例）
     *          2.设置属性比例  可以通过惩罚系数来设定  超出,则急剧减少
     *          4.缺陷在于无法设置权重 => 解决方案：在初始化的时候，就不一定保证题型和属性符合要求，使用GA
     *                迭代和轮盘赌解决。
    // 题型和属性比例 和轮盘赌搭建关系：
    //      已抽取的属性个数越多，则惩罚系数越大 且各个属性是累乘关系 Math.pow(0.5,typeChose)
    //      比例和一个固定值做比较即可
    //      eg: typeChose/10    AttributeRatio1/23
    //      如果未超出比例，则按照正常流程走，一旦超过，则适应度值急剧下降 Math.pow(0.5,typeChose*typeChose);


/**
     * TODO 遗传算法中的锦标赛选择策略
     * TODO 每次从种群中取出一定数量个体（放回抽样），然后选择其中最好的一个进入子代种群。
     *      具体的操作步骤如下：
     *          1、确定每次选择的个体数量N。（N元锦标赛选择即选择N个个体）
     *          2、从种群中随机选择N个个体(每个个体被选择的概率相同) ，根据每个个体的适应度值，
     *             选择其中适应度值最好的个体进入下一代种群。
     *          3、重复步骤(2)多次（重复次数为种群的大小），直到新的种群规模达到原来的种群规模。
     */
      //9元锦标赛   当N的个数无限接近题库大小时,其和轮盘赌的前半部分是一致的
        //存
        map.put(splits[0],penalty);
        //取
        String s = hashMapSort(map);



    1.2 选择 和 精英策略 是否可以去除（基数/提供遗传变异的基本单位）
            // i 迭代次数
            // 迭代3次  出现只有三套试卷可选
            // 迭代6次  大概率十套试卷一模一样
                    //轮盘赌 越大的适应度，其叠加时增长越快，即有更大的概率被选中
                    //FIXME 同一套试卷可能会被选取两次   需要做修改  最后导致十套试卷一模一样
                    //FIXME       如果根据id去重，将导致轮盘赌失去了本身的意义
                    //newPaperGenetic[newSelectId]   = paperGenetic[i];
            //精英策略:用全局最优替换掉局部最优
    1.3 三种修补方案： 构造、修补、？
2.准备汇报材料
    2.1 校验.brmp

